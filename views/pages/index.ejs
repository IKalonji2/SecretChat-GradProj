<html lang="en">
<head>
    <%- include('../partials/head.ejs'); %>
</head>
<body class="container">
    <!-- <header>
    </header> -->
  
    <section class="container">
        <aside class="profiles-wrapper">
            <div class="user profile">
                <div class="img-holder"></div>
                <div class="username"><p>Username</p></div>
            </div>
            <div class="contacts">
                <div class="contacts-header">
                    <!-- <div class="img-holder"></div> -->
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
                <div class="contact profile">
                    <div class="img-holder"></div>
                    <div class="username"><p>Username</p></div>
                </div>
            </div>
        </aside>
  
        <%- include('../partials/chat.ejs', { user: { username: 'Lebo', imageUrl: 'https://randomuser.me/api/portraits/men/9.jpg', online: true  } }) %> 
    </section>

    <script src="./socket.io/socket.io.js"></script>
    <script>
        const socket = io(/*{ autoConnect: false }*/);
        const users = [];

        socket.onAny((event, ...args) => {
            console.log(event, args);
        });

        const initReactiveProperties = (user) => {
            console.log('USER:', user);
            user.connected = true;
            user.messages = [];
            user.hasNewMessages = false;
        };

        socket.on('user connected', (user) => {
            initReactiveProperties(user);
            users.push(user);
            console.log('USERS:', users);
        })

        socket.on('users', (users) => {
            console.log('USERS[SOCKER.ON("USERS")] BEFORE SORT', users);
            users.forEach((user) => {
                user.self = user.userID === socket.id;
                initReactiveProperties(user);
            });
            console.log('USERS[SOCKER.ON("USERS")] AFTER IRP', users);
            // put the current user first, and sort by username
            this.users = users.sort((a, b) => {
                if (a.self) return -1;
                if (b.self) return 1;
                if (a.userInfo.username < b.userInfo.username) return -1;
                return a.userInfo.username > b.userInfo.username ? 1 : 0;
            });
            console.log('USERS[SOCKER.ON("USERS")] AFTER SORT', users);
        });

        function onUsernameSelection(event) {
            event.preventDefault();
            let username = document.getElementById('username').value;
            socket.auth = { username, usernameSelected: true }
            socket.connect();
        }

        function attachment(event) {
            event.preventDefault();
            alert('Attachment Pressed');
        }
        function emoticons(event) {
            event.preventDefault();
            alert('Emoticons Pressed');
        }
        function sendMessage(event) {
            event.preventDefault();
            const formData = new FormData(event.target);
            const formProps = Object.fromEntries(formData);
            alert(formProps['input-message']);
        }

        socket.on('connect-error', (err) => {
            if (err.message === 'invalid username') {
                //this.usernameSelected = false;
            }
        });
    </script>
</body>
</html>